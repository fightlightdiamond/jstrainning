// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

enum Gender {
  MALE
  FEMALE
  OTHER
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  email       String     @unique
  lastName        String?
  firstName        String?
  password    String
  userStatus  String?    @default("Active")
  phoneNumber String?    @unique
  balance   BigInt       @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  comments    Comment[]
  likes       Like[]
}

model AutoBet {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}

model AutoSetting {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}

model Bet {
  id        Int      @id @default(autoincrement())
  userId    Int
  matchId   Int
  heroId    Int
  balance   Int
  result    Boolean @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model EloMath {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}

model GuildCurrency {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}

model GuildMatch {
  id         Int      @id @default(autoincrement())
  heroInfo   Json
  turns      Json?
  startTime  DateTime?
  turnNumber Int
  status     Int
  winner     Int
  loser      Int
  type       Int
  createdAt  DateTime
  updatedAt  DateTime
}

model Hero {
  id               Int @id @default(autoincrement())
  acc              Int @default(0)
  atk              Int @default(1000)
  atkHealing       Int @default(0)
  cc               Int @default(0)
  critDmg          Int @default(175)
  critRate         Int @default(20)
  def              Int @default(15)
  dodge            Int @default(1)
  effectResistance Int @default(0)
  intrinsicStatus  Int @default(0)
  element          Int @default(0)
  hp               Int @default(10000)
  name             String @unique
  position         String?
  spd              Int @default(200)
  status           Int @default(1)
  story            String?
  guide            String?
  createdAt        DateTime?
  updatedAt        DateTime?
}

model Match {
  id         Int      @id @default(autoincrement())
  heroInfo   Json?
  turns      Json?
  startTime  DateTime?
  turnNumber Int        @default(0)
  status     Int
  winner     Int
  loser      Int
  type       Int?       @default(0)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model UserGem {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model UserHero {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model UserSetting {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

enum Operation {
  list
  get
  create
  update
  delete
  search
  onCreate
  onUpdate
  onDelete
}

enum RoleTypes {
  SUPER_ADMIN
  ADMIN
  EDITOR
  AUTHOR
  READER
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  roleType    RoleTypes
  permissions Permission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
}

model Permission {
  id                Int         @id @default(autoincrement())
  modelName         String
  allowedOperations Operation[]
  rolePermissionsId Int
  role              Role        @relation(fields: [rolePermissionsId], references: [id])
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now())
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  articles  Article[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model Article {
  id           Int            @id @default(autoincrement())
  title        String
  content      String
  views        Int            @default(0)
  categoryId   Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  comments     Comment[]
  likes        Like[]
  ArticleImage ArticleImage[]
  Category     Category       @relation(fields: [categoryId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  articleId Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  article   Article  @relation(fields: [articleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  articleId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  article   Article  @relation(fields: [articleId], references: [id])
}

model ArticleImage {
  id        Int      @id @default(autoincrement())
  articleId Int
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  article   Article  @relation(fields: [articleId], references: [id])
}
